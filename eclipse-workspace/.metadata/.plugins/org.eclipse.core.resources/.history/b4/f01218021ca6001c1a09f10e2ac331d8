package tree;

import java.util.*;

public class binary {

	public static class node{
		int data;
		node left;
		node right;
	}
	
	public static node construct (node root ,int[] arr)
	{
		Stack<pair> world = new Stack<>();
		int value;
//		value=Integer.parseInt(arr[0]);
		value = arr[0];
		root.data= value;
		
		pair top = new pair(root,0);
		
		world.push(top);
		
		for(int i=1;i<arr.length;i++)
		{
			if(arr[i] == -1)
			{
				world.peek().state++;
				System.out.println("getting out from the leave or root "+ world.peek().root.data + "state "+ world.peek().state);
				if(world.peek().state == 2)				
				{
					world.pop();
				}
			}
			else {
				if(world.peek().state == 2 )
				{
					world.pop();
				}
				node Top = world.peek().root;
//				value = Integer.parseInt(arr[i]);
				value = arr[i];
				System.out.println(value);
				System.out.println("stack value "+ world.peek().root.data +"state of the top value"+ world.peek().state);
				
				node temp = new node();
				temp.data= value;
				
				
				if(world.peek().state == 0)
				{
					
					world.peek().state++;
					pair le= new pair(temp,0);
					world.push(le);
					Top.left = temp;
					
				}
				else if(world.peek().state == 1)
				{
					world.peek().state++;
					pair re = new pair(temp,0);
					world.push(re);
					Top.right= temp;
				}
				else {
					world.pop();
					
				}
				
			}
			
		}
		return root;
	}
	
	public static void display(node root)
	{
		if(root == null)
		{
			return;	
		}
		StringBuffer sbl = new StringBuffer();
		StringBuffer sbr= new StringBuffer();
		
		String str = "<-"+ root.data +"->";
//		if(root.left == null)
//		{
//			sbl.append('.');
//		}
//		else {
//			sbl.append(root.left.data);
//			
//		}
//		
//		if(root.right == null)
//		{
//			sbr.append('.');
//			
//		}
//		else {
//			sbr.append(root.right.data);
//		}
		str+= (root.left == null)?".":""+root.left.data;
		str+=(root.right == null)? ".": ""+root.right.data;
		
		
//		str = sbl + sbrl;							
		
		System.out.println(str);
		display(root.left);
		display(root.right);
		
		
		
	}
	public static class  pair{
		int state;
		node root;
		
		public pair(node temp ,int state)
		{
			this.state= state;
			this.root= temp;
			
		}
	}
	
	public static void main(String[] asa)
	{
		node root = new node();
		int lenght;
		Scanner cin = new Scanner(System.in);
		lenght= cin.nextInt();
		
		int[] arr= new int[lenght];
		for(int i=0;i<arr.length;i++)
		{
			arr[i]= cin.nextInt();		
		}
		root = construct(root,arr);
		display(root);
	}
	
}

//19
//50 25 12 -1 -1 37 30 -1 -1 -1 75 62 -1 70 -1 -1 87 -1 -1
